version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: affiliate_postgres
    environment:
      POSTGRES_DB: affiliate_saas
      POSTGRES_USER: affiliate_user
      POSTGRES_PASSWORD: affiliate_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - affiliate_network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: affiliate_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - affiliate_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend/affiliate-marketing-api
      dockerfile: Dockerfile
    container_name: affiliate_backend
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://affiliate_user:affiliate_password@postgres:5432/affiliate_saas
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - affiliate_network
    volumes:
      - ./backend/affiliate-marketing-api/uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dashboard
  frontend:
    build:
      context: ./frontend/affiliate-marketing-dashboard
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://localhost:5000
        - VITE_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
    container_name: affiliate_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - affiliate_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: affiliate_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - affiliate_network
    restart: unless-stopped

  # Celery Worker (for background tasks)
  celery_worker:
    build:
      context: ./backend/affiliate-marketing-api
      dockerfile: Dockerfile
    container_name: affiliate_celery_worker
    command: celery -A src.celery_app worker --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://affiliate_user:affiliate_password@postgres:5432/affiliate_saas
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
    depends_on:
      - postgres
      - redis
    networks:
      - affiliate_network
    volumes:
      - ./backend/affiliate-marketing-api/uploads:/app/uploads
    restart: unless-stopped

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: ./backend/affiliate-marketing-api
      dockerfile: Dockerfile
    container_name: affiliate_celery_beat
    command: celery -A src.celery_app beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://affiliate_user:affiliate_password@postgres:5432/affiliate_saas
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key}
    depends_on:
      - postgres
      - redis
    networks:
      - affiliate_network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: affiliate_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - affiliate_network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: affiliate_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - affiliate_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  affiliate_network:
    driver: bridge

